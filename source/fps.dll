#include <Windows.h>
#include <stdio.h>
#include <iostream>


// chip - adding macros
# define DX_PRINT(x) std::cout << x << std::endl;
# define DX_ERROR(x) std::cerr << x << std::endl;
#define DX_MBPRINT(x) MessageBox(NULL, x, "Message", MB_OK);
#define DX_MBERROR(x) MessageBox(NULL, x, "Error", MB_ICONERROR | MB_OK);

//=======================================================================================================================================================================================



// Function to perform the memory modification
void PerformMemoryModification() {
    // Define the offsets to modify the 4 bytes value
    DWORD offset1 = 0x00434DA3;
    DWORD offset2 = 0x00434DB3;

    // Open the process to modify memory
    HANDLE hProcess = OpenProcess(PROCESS_VM_WRITE | PROCESS_VM_OPERATION | PROCESS_QUERY_INFORMATION, FALSE, GetCurrentProcessId());
    if (hProcess == NULL) {
        DX_ERROR("Failed to open process.");
        return;
    }

    // Function to write memory at a given offset
    auto WriteMemory = [&](DWORD offset, const char* offsetName) {
        BYTE buffer[4] = { 0x00, 0x00, 0x00, 0x00 };
        SIZE_T bytesWritten;

        // Change memory protection to allow writing
        DWORD oldProtect;
        if (!VirtualProtectEx(hProcess, reinterpret_cast<LPVOID>(offset), sizeof(buffer), PAGE_EXECUTE_READWRITE, &oldProtect)) {
            DX_ERROR("Failed to change memory protection at offset %s (0x%08X).", offsetName, offset);
            return;
        }

        // Write the new memory value
        if (!WriteProcessMemory(hProcess, reinterpret_cast<LPVOID>(offset), buffer, sizeof(buffer), &bytesWritten)) {
            DX_ERROR("Failed to write memory at offset %s (0x%08X).", offsetName, offset);

            // Restore the original memory protection
            VirtualProtectEx(hProcess, reinterpret_cast<LPVOID>(offset), sizeof(buffer), oldProtect, &oldProtect);
            return;
        }

        // Restore the original memory protection
        if (!VirtualProtectEx(hProcess, reinterpret_cast<LPVOID>(offset), sizeof(buffer), oldProtect, &oldProtect)) {
            DX_ERROR("Failed to restore memory protection at offset %s (0x%08X).", offsetName, offset);
            return;
        }

        if (bytesWritten != sizeof(buffer)) {
            DX_ERROR("Failed to write the correct amount of bytes at offset %s (0x%08X).", offsetName, offset);
            return;
        }
        };

    // Write memory for each offset
    WriteMemory(offset1, "Offset 1");
    WriteMemory(offset2, "Offset 2");

    CloseHandle(hProcess);
}

// Thread function to wait and then perform the memory modification
DWORD WINAPI MemoryModificationThread(LPVOID lpParam) {
    // Wait for 10 seconds to allow the game to load
    Sleep(10000);

    // Perform the memory modification after the delay
    PerformMemoryModification();

    return 0;
}


//=======================================================================================================================================================================================

// Entry point of the DLL
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved) {
    switch (fdwReason) {
    case DLL_PROCESS_ATTACH:
        // Create a thread to perform the memory modification with a delay
        CreateThread(NULL, 0, MemoryModificationThread, NULL, 0, NULL);
        break;
    case DLL_PROCESS_DETACH:
        // Cleanup code when DLL is detached from a process (i.e., when the game closes)
        break;
    }
    return TRUE;
}
